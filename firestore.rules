rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to allow anonymous read for graceful degradation
    function canReadAnonymously() {
      return true; // Allow read for better UX, but enforce auth for writes
    }
    
    // User Preferences - Users can only read/write their own preferences
    // Anonymous users can read (returns null gracefully) but cannot write
    match /userPreferences/{userId} {
      allow read: if canReadAnonymously() || isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Recommendation History - Users can only read/write their own recommendations
    // Anonymous users can create recommendations but they won't be persisted long-term
    match /recommendationHistory/{recommendationId} {
      allow read: if canReadAnonymously() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if true; // Allow anonymous creation for demo purposes
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Users collection - Users can read/write their own profile
    match /users/{userId} {
      allow read: if canReadAnonymously() || isOwner(userId);
      allow write: if isOwner(userId);
      
      // User's recommendation history (nested under users)
      match /recommendationHistory/{recommendationId} {
        allow read: if canReadAnonymously() || isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's feedback on recommendations (nested under users)
      match /feedback/{recommendationId} {
        allow read: if canReadAnonymously() || isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      // User's outfit usage tracking (nested under users)
      match /outfitUsage/{usageId} {
        allow read: if canReadAnonymously() || isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Default deny write, allow read for graceful degradation
    match /{document=**} {
      allow read: if canReadAnonymously();
      allow write: if false;
    }
  }
}
